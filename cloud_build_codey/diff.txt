import argparse
import sys

from google.cloud import aiplatform
from vertexai.preview.language_models import ChatModel, InputOutputTextPair
from vertexai.preview.language_models import CodeChatModel

path = "/workspace/diff.txt"

def documentation(temperature: float = 0.5) -> object:
    parameters = {
        "temperature": temperature,  # Temperature controls the degree of randomness in token selection.
        "max_output_tokens": 1024,  # Token limit determines the maximum amount of text output.
    }

    code_chat_model = CodeChatModel.from_pretrained("codechat-bison@001")
    chat = code_chat_model.start_chat()

    # response = chat.send_message(
    #     "Document the following code - def min(a, b): if a < b: return a else: return b", **parameters
    # )

    data = open(path, 'r').read()
    data = data.replace('\n', '')

    query = "Document the following code " + data
    response = chat.send_message(query, **parameters)
    print(f"Response from Model: {response.text}")

    return response

def releasenotes(temperature: float = 0.5) -> object:
    parameters = {
        "temperature": temperature,  # Temperature controls the degree of randomness in token selection.
        "max_output_tokens": 1024,  # Token limit determines the maximum amount of text output.
    }

    code_chat_model = CodeChatModel.from_pretrained("codechat-bison@001")
    chat = code_chat_model.start_chat()
 
    data = open(path, 'r').read()
    # Replacing all occurrences of newline in data with ''
    data = data.replace('\n', '')
    
    query = "Write release notes for " + data

    response = chat.send_message(query, **parameters)

    # print(f"Response from Model: {response.text}")
    release_notes = open("release_notes.md", "w")
    rnOutput = str(response)
    release_notes.write(rnOutput)
    release_notes.close()

    return print("The generated release notes are: \n\n" + rnOutput)

def write_a_function(temperature: float = 0.5) -> object:

    parameters = {
        "temperature": temperature,  # Temperature controls the degree of randomness in token selection.
        "max_output_tokens": 1024,  # Token limit determines the maximum amount of text output.
    }

    code_chat_model = CodeChatModel.from_pretrained("codechat-bison@001")
    chat = code_chat_model.start_chat()

    response = chat.send_message(
        "Please help write a function to calculate the min of two numbers", **parameters
    )
    print(f"Response from Model: {response.text}")

    return response

def optimse(temperature: float = 0.5) -> object:

    parameters = {
        "temperature": temperature,  # Temperature controls the degree of randomness in token selection.
        "max_output_tokens": 1024,  # Token limit determines the maximum amount of text output.
    }

    code_chat_model = CodeChatModel.from_pretrained("codechat-bison@001")
    chat = code_chat_model.start_chat()
 
    data = open(path, 'r').read()
    data = data.replace('\n', '')
    
    # query = "Please help write detailed release notes for " + data
    query = "Please optimze this code " + data

    response = chat.send_message(query, **parameters)    
    
    suggestion = str(response)
    return print("A possible optimsation is : \n\n" + suggestion)


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()

parser_documentation = subparsers.add_parser('documentation', help='Generate docuemntation for provided code')
parser_documentation.set_defaults(func=documentation)
      
parser_release_notes = subparsers.add_parser('release-notes', help='Generate Release notes')
parser_release_notes.set_defaults(func=releasenotes)

parser_release_notes = subparsers.add_parser('write-a-function', help='Generate a function')
parser_release_notes.set_defaults(func=write_a_function)

parser_release_notes = subparsers.add_parser('optimise', help='Look at code and suggest optimisation')
parser_release_notes.set_defaults(func=optimse)

if len(sys.argv) <= 1:
    sys.argv.append('--help')

options = parser.parse_args()
# Run the appropriate function
options.func()

# If you add command-line options, consider passing them to the function,
# e.g. `options.func(options)`